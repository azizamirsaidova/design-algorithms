/////////////////////////////////////////////////
// DO NOT EDIT THIS FILE

#include "student_code_3.h" 
#include "test_framework.h"
#include <string>
#include <vector>

const char *smallDataset = "small_problem_set_3.in";
const char *largeDataset = "large_problem_set_3.in";

const char *helpMsg = 
   "Please, indicate which problem set to use.\n\n"
   "For small problem set,"
      " type: ./problem_solver_3 small\n"
   "For large problem set, type:"
      " ./problem_solver_3 large\n";

const char *strNotice = 
   "##################################\n"
   "# Do not edit this file!\n"
   "##################################\n";

constexpr int problem_set_id = 3;

struct ProblemN3 : public TestFramework::BasicProblem 
{
   std::vector<int> left_high_priority;
   std::vector<int> right_high_priority;
   std::vector<int> left_low_priority;
   std::vector<int> right_low_priority;
};

void InitJobVector(/* out */ std::vector<Job>& jobs,
                   const std::vector<int>& leftEndpoints,
                   const std::vector<int>& rightEndpoints)
{
   TestFramework::ExitIfConditionFails(leftEndpoints.size() == rightEndpoints.size(),
      "The number of left endpoints does not math"
      "with the number of right endpoints.");
   
   size_t nSize = leftEndpoints.size();
   jobs.resize(nSize);

   for (size_t i = 0; i < nSize; ++i)
   {
      jobs[i].start = leftEndpoints[i];
      jobs[i].finish = rightEndpoints[i];
   }

   //verify that the set of job is valid
   for (Job j: jobs)
   {
      using namespace TestFramework;
      ExitIfConditionFails(j.start >= 0, 
         "Start time must be non-negative.");
      ExitIfConditionFails(j.finish >= 0,
         "Finish time must be non-negative.");
      ExitIfConditionFails(j.start <= j.finish,
         "Start time must be after finish time.");
   }
}

int FindOptimalSchedule(const std::vector<int>& left_high_priority,
                        const std::vector<int>& right_high_priority,
                        const std::vector<int>& left_low_priority,
                        const std::vector<int>& right_low_priority)
{
   std::vector<Job> highPriorityJobs;
   std::vector<Job> lowPriorityJobs;

   InitJobVector (highPriorityJobs, left_high_priority, right_high_priority);
   InitJobVector (lowPriorityJobs, left_low_priority, right_low_priority);

   return FindOptimalSchedule(highPriorityJobs, lowPriorityJobs);
}

int main(int argc, char *argv[]) 
{
   using namespace TestFramework;

   static_assert(
      GetTestFrameworkVersion() == 8,
      "TestFramework version 8 is required."
      "Please, update test_framework.h.");

   if ((argc != 2) && (argc != 3)) 
   {
       std::cout << helpMsg;
   }

   std::string firstArg(DefaultProblemSet());

   if (argc >= 2) 
   {
      firstArg = argv[1];
   }
   else 
   {
      std::cout << "\nUsing the default problem set: " << firstArg;
   }

   ExitIfConditionFails((firstArg == "small") || (firstArg == "large"),
                         "Unknown problem set.");
   bool bSmallDataset = (firstArg == "small");

   std::cout << std::endl << "Problem set #" << problem_set_id << ". ";

   ProblemSetHeader header;
   RecordAdapter<ProblemSetHeader> psAdapter(header);
   AddDefaultProblemSetColumns(psAdapter);

   std::vector<ProblemN3> problems;
   TableAdapter<ProblemN3> prAdapter(problems);
   AddDefaultProblemColumns(prAdapter);

   AddColumn<ProblemN3>(prAdapter, "left_high_priority", &ProblemN3::left_high_priority);
   AddColumn<ProblemN3>(prAdapter, "right_high_priority", &ProblemN3::right_high_priority);
   AddColumn<ProblemN3>(prAdapter, "left_low_priority", &ProblemN3::left_low_priority);
   AddColumn<ProblemN3>(prAdapter, "right_low_priority", &ProblemN3::right_low_priority);

   BasicYamlParser parser(dynamic_cast<ITable *>(&psAdapter),
                            dynamic_cast<ITable *>(&prAdapter));

   const char *inputFilename = bSmallDataset ? smallDataset : largeDataset;
   std::cout << "File: " << inputFilename << ".\n";

   parser.ParseFile(inputFilename, true);
   PreprocessProblemSet(problem_set_id, problems, header);

   for (int i = 0; i < problems.size(); ++i) 
   {
      auto &theProblem = problems[i];
      theProblem.student_answer = 
             FindOptimalSchedule(theProblem.left_high_priority,
                                 theProblem.right_high_priority,
                                 theProblem.left_low_priority,
                                 theProblem.right_low_priority);
  }

   ProcessResults(problems, header);

   std::cout << "Don't forget to submit your "
               "source code on Canvas.";

   std::cout << "\nRunning time: ";
   std::cout << header.time << "ms";
   std::cout << std::endl << std::endl;
   std::cout << std::endl << std::endl;

   if (argc == 3) {
      const char *outputFilename = argv[2];
      std::cout << "Generating a report. ";
      std::cout << "The report is saved in file '";
      std::cout << outputFilename << "'.\n";
      TableAdapter<ProblemN3> prOutAdapter(problems);
      AddDefaultProblemColumnsForOutput(prOutAdapter);

      WriteTableToFile(outputFilename, 
                       &prOutAdapter, 
                       &psAdapter,
                       true,
                       strNotice);
  }

   return 0;
}
